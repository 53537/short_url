#短连接创建和解析
server {
    server_name short.10000.com shorts.10000.com;
    listen 80;
    lua_code_cache off;

    location / {
    	lua_socket_keepalive_timeout 30s;
   	content_by_lua_file /data/html/file_lua/short/index.lua;
    }
    location /short {
    	lua_socket_keepalive_timeout 30s;
    	content_by_lua_file /data/html/file_lua/short/shorten.lua;
    }
}

#可以二级跳
server {
    server_name b.10000.com c.10000.com;
    listen 80;

    rewrite_by_lua '
	local redis = require "redis"
        local red = redis:new()
        local cjson = require("cjson")  
	local uri = ngx.var.request_uri 

        red:set_timeout(1000) -- 1 sec
        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.say("failed to connect: ", err)
            return
        end

        local res, err = red:get("test_lb_domain_landing")
        if not res then
            ngx.say("failed to get redis: ", err)
            return
        end
        if res == ngx.null then
            ngx.say("reids key not found.")
            return
        end

	local obj = cjson.decode(res)
	url = obj[1]
 	
	urls = url .. uri

	return ngx.redirect(urls)
	
    ';
	
